# Generated by Django 4.0.5 on 2022-06-29 14:51

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sector_name', models.CharField(choices=[('Coord. Gestão de Trabalho', 'Coord. Gestão de Trabalho'), ('Coord. Regulação e Gestão Financeira do Suas', 'Coord. Regulação e Gestão Financeira do Suas'), ('Coord. Vigilância Socioassistencial', 'Coord. Vigilância Socioassistencial'), ('Coord. Proteção Social Básica', 'Coord. Proteção Social Básica'), ('Coord. Proteção Social Especial de Media Complexidade', 'Coord. Proteção Social Especial de Media Complexidade'), ('Coord. Proteção Social Especial de Alta Complexidade', 'Coord. Proteção Social Especial de Alta Complexidade'), ('Coord. Gestão de Benefícios Socioassistenciais', 'Coord. Gestão de Benefícios Socioassistenciais'), ('Coord. Gestão de Programas de Projetos Socioassistenciais', 'Coord. Gestão de Programas de Projetos Socioassistenciais'), ('Coord. de Gestão de Cadastro Unico dos Programas sociais e do Programa Bolsa Familia', 'Coord. de Gestão de Cadastro Unico dos Programas sociais e do Programa Bolsa Familia'), ('NUEP - Núcleo de Educação Permanente', 'NUEP - Núcleo de Educação Permanente'), ('CIB - Comissao Intergestores Bipartite', 'CIB - Comissao Intergestores Bipartite'), ('SAAS - GAB', 'SAAS - GAB')], max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TableEventModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_event', models.TextField(max_length=150, verbose_name='Titulo')),
                ('event_feature', models.CharField(choices=[('Presencial', 'Presencial'), ('Híbrida', 'Híbrida'), ('Não Presencial', 'Não Presencial')], default='Híbrida', max_length=50)),
                ('date_initial', models.DateField(verbose_name='Data Inicial')),
                ('date_final', models.DateField(verbose_name='Data Final')),
                ('date_to_publication', models.DateField(default=django.utils.timezone.now, verbose_name='Data da Publicação')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tabelaEventos', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TableActionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acao_realizada', models.CharField(choices=[('Apoio Técnico Presencial (ATP)', 'Apoio Técnico Presencial (ATP)'), ('Apoio Técnico Não Presencial (ATNP)', 'Apoio Técnico Não Presencial (ATNP)'), ('Outras Ações', 'Outras Ações')], default='Apoio Técnico Presencial (ATP)', max_length=100)),
                ('tecnico_presencial', models.CharField(choices=[('Encontros de apoio técnico', 'Encontros de apoio técnico'), ('Apoio técnico individualizado no município', 'Apoio técnico individualizado no município'), ('Apoio técnico individualizado na SAAS', 'Apoio técnico individualizado na SAAS'), ('Monitoramento com periodicidade mínima anual', 'Monitoramento com periodicidade mínima anual'), ('Seminários e/ou Oficinas', 'Seminários e/ou Oficinas'), ('Visitas técnicas', 'Visitas técnicas'), ('(Não se aplica)', '(Não se aplica)')], max_length=100)),
                ('tecnico_nao_presencial', models.CharField(choices=[('Centrais de relacionamento', 'Centrais de relacionamento'), ('E-mails, telefonemas e mensagens', 'E-mails, telefonemas e mensagens'), ('Normas, orientações técnicas e materiais informativos', 'Normas, orientações técnicas e materiais informativos'), ('Videoconferências e transmissões ao vivo', 'Videoconferências e transmissões ao vivo'), ('Instrumentos e ferramentas informacionais do SUAS', 'Instrumentos e ferramentas informacionais do SUAS'), ('Sítios eletrônicos e aplicativos', 'Sítios eletrônicos e aplicativos'), ('(Não se Aplica)', '(Não se Aplica)')], max_length=100)),
                ('outras_acoes', models.CharField(choices=[('Apuração de denúncias', 'Apuração de denúncias'), ('Fiscalizações e auditorias', 'Fiscalizações e auditorias'), ('Plano de Providências', 'Plano de Providências'), ('Capacitação', 'Capacitação'), ('Supervisão Técnica', 'Supervisão Técnica'), ('Formação', 'Formação'), ('Manifestação Técnica', 'Manifestação Técnica'), ('Audiência Pública', 'Audiência Pública'), ('(Não se aplica)', '(Não se aplica)'), ('Outros', 'Outros')], max_length=100)),
                ('numbers_employee', models.IntegerField(verbose_name='Numero de Funcionario')),
                ('description_action', models.TextField(max_length=100, verbose_name='Descrição da Ação')),
                ('date_actions', models.DateField(verbose_name='Data')),
                ('date_to_publication', models.DateField(default=django.utils.timezone.now, verbose_name='Data da Publicação')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tabelaAcoes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
